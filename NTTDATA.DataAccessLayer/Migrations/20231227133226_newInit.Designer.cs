// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NTTDATA.DataAccessLayer.Context;

#nullable disable

namespace NTTBlog.DataAccessLayer.Migrations
{
    [DbContext(typeof(UygulamaDbContext))]
    [Migration("20231227133226_newInit")]
    partial class newInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NTTBlog.Entity.Entites.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48a8234e-c5ce-4921-afb8-ddf8acf24b25"),
                            CategoryId = new Guid("9b1056f6-6171-49a5-9baa-d22c489289b6"),
                            Content = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.",
                            CreatedBy = "adminTest",
                            CreatedDate = new DateTime(2023, 12, 27, 16, 32, 26, 425, DateTimeKind.Local).AddTicks(4784),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("1465691c-3690-40b6-9fab-99a388205514"),
                            IsPublish = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "deneme",
                            Title = "Data Base Deneme",
                            UserId = new Guid("538fab7b-024b-458a-bb52-b2520f3bcc49"),
                            ViewCount = 13
                        },
                        new
                        {
                            Id = new Guid("5923f071-c664-48f6-aa2a-5cf46530a048"),
                            CategoryId = new Guid("e90e9e24-83d4-4b50-ae2c-d3187abf3d26"),
                            Content = " Deneme There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.",
                            CreatedBy = "adminTest",
                            CreatedDate = new DateTime(2023, 12, 27, 16, 32, 26, 425, DateTimeKind.Local).AddTicks(4790),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("e37a4a99-7458-4089-a6de-d5dbf52c95cd"),
                            IsPublish = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "deneme2",
                            Title = "Data Base Deneme 2",
                            UserId = new Guid("0a3adee6-2f0d-42b7-83d3-22f95f64ccab"),
                            ViewCount = 7
                        });
                });

            modelBuilder.Entity("NTTBlog.Entity.Entites.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b1056f6-6171-49a5-9baa-d22c489289b6"),
                            CreatedBy = "adminDeneme",
                            CreatedDate = new DateTime(2023, 12, 27, 16, 32, 26, 425, DateTimeKind.Local).AddTicks(5378),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deneme"
                        },
                        new
                        {
                            Id = new Guid("e90e9e24-83d4-4b50-ae2c-d3187abf3d26"),
                            CreatedBy = "adminDeneme",
                            CreatedDate = new DateTime(2023, 12, 27, 16, 32, 26, 425, DateTimeKind.Local).AddTicks(5380),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deneme 2"
                        });
                });

            modelBuilder.Entity("NTTBlog.Entity.Entites.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1465691c-3690-40b6-9fab-99a388205514"),
                            CreatedBy = "adminTest",
                            CreatedDate = new DateTime(2023, 12, 27, 16, 32, 26, 425, DateTimeKind.Local).AddTicks(4039),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FileType = "jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "image/testjpeg"
                        },
                        new
                        {
                            Id = new Guid("e37a4a99-7458-4089-a6de-d5dbf52c95cd"),
                            CreatedBy = "adminTest",
                            CreatedDate = new DateTime(2023, 12, 27, 16, 32, 26, 425, DateTimeKind.Local).AddTicks(4042),
                            DeletedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FileType = "jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "image/test2jpeg"
                        });
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("87b47b4d-98ae-4767-b1fa-d39d2bd0e800"),
                            ConcurrencyStamp = "05c252bd-b4b7-4d00-8725-41f6143ed10e",
                            Name = "MasterAdmin",
                            NormalizedName = "MASTERADMIN"
                        },
                        new
                        {
                            Id = new Guid("cc17cf5b-4ac8-4720-9046-28b0dd47f2de"),
                            ConcurrencyStamp = "f0d96548-d3eb-4342-9755-f9e488083e5e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("40dd91bf-4fc6-415e-9f9a-eceb1b3943fc"),
                            ConcurrencyStamp = "b0ae5a2c-2954-4071-8296-589fd218d656",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("538fab7b-024b-458a-bb52-b2520f3bcc49"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08ee239b-e95e-4d88-b65c-e1b5e98c8e01",
                            Email = "masteradmin@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Demo",
                            ImageId = new Guid("1465691c-3690-40b6-9fab-99a388205514"),
                            LastName = "MasterAdmin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MASTERADMIN@GMAIL.COM",
                            NormalizedUserName = "MASTERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECpHI8stLTv2tp/SSIbGmtO0xRTJ3mfpNDgA3Y6M6CvkOO+SZmVj1lUTiUvz6Ytm0w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d053b55-1373-413a-9ba8-2b28162e2802",
                            TwoFactorEnabled = false,
                            UserName = "masteradmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("0a3adee6-2f0d-42b7-83d3-22f95f64ccab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8c372d3-a2ea-4db1-9ede-91660f53c4d3",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Demo",
                            ImageId = new Guid("e37a4a99-7458-4089-a6de-d5dbf52c95cd"),
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG/tOUENtEnB7OClOcq4pjdskQ8/8E5BLKFCVgS6O+VPAtOSpqhZCtXcEJtAAAMslA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67088c49-c092-487d-a82a-2be9130f1a8c",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("538fab7b-024b-458a-bb52-b2520f3bcc49"),
                            RoleId = new Guid("87b47b4d-98ae-4767-b1fa-d39d2bd0e800")
                        },
                        new
                        {
                            UserId = new Guid("0a3adee6-2f0d-42b7-83d3-22f95f64ccab"),
                            RoleId = new Guid("cc17cf5b-4ac8-4720-9046-28b0dd47f2de")
                        });
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NTTBlog.Entity.Entites.Article", b =>
                {
                    b.HasOne("NTTBlog.Entity.Entites.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTTBlog.Entity.Entites.Image", "Image")
                        .WithMany("Articles")
                        .HasForeignKey("ImageId");

                    b.HasOne("NTTBlog.Entity.IdentityEntites.AppUser", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppRoleClaim", b =>
                {
                    b.HasOne("NTTBlog.Entity.IdentityEntites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUser", b =>
                {
                    b.HasOne("NTTBlog.Entity.Entites.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserClaim", b =>
                {
                    b.HasOne("NTTBlog.Entity.IdentityEntites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserLogin", b =>
                {
                    b.HasOne("NTTBlog.Entity.IdentityEntites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserRole", b =>
                {
                    b.HasOne("NTTBlog.Entity.IdentityEntites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NTTBlog.Entity.IdentityEntites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUserToken", b =>
                {
                    b.HasOne("NTTBlog.Entity.IdentityEntites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NTTBlog.Entity.Entites.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("NTTBlog.Entity.Entites.Image", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NTTBlog.Entity.IdentityEntites.AppUser", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
